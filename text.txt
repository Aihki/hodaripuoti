 
 ///custom hotdog
 
  const checkboxContainer = document.createElement("div");
          checkboxContainer.className = "checkbox-container custom-checkbox";

          const input = document.createElement("input");
          input.type = "checkbox";
          input.className = `${productType}-checkbox`;
          input.id = option.id.toString();

          const label = document.createElement("label");
          label.htmlFor = option.id.toString();
          label.textContent = option.label;

          const price = document.createElement("span");
          price.className = "price";
          price.textContent = option.price + "€";

          checkboxContainer.appendChild(input);
          checkboxContainer.appendChild(label);
          checkboxContainer.appendChild(price);

          container.appendChild(checkboxContainer);


///beverage
const beverageContainer = document.querySelector(".drink-container");
  if (beverageContainer) {
    beverage.forEach((option: Beverage) => {
      const beverageItemContainer = document.createElement("div");
      beverageItemContainer.className = "drink-item-container";

      const title = document.createElement("h3");
      title.className = "drink-title";
      title.textContent = option.label;

      const price = document.createElement("p");
      price.className = "drink-price";
      price.textContent = option.price + "€";

      const button = document.createElement("a");
      button.className = "add-to-cart-btn";
      button.textContent = "Lisää koriin";

      beverageItemContainer.appendChild(img);
      beverageItemContainer.appendChild(title);
      beverageItemContainer.appendChild(price);
      beverageItemContainer.appendChild(button);

      beverageContainer.appendChild(beverageItemContainer);
    });
  }


  INSERT INTO  hod_custom (order_id, toppings, base_price, hotdog_name)
  VALUE (1,'Täysjyvä sämpylä, Tulinen soijamakkara, Jalapenos, Avocado, Tulinen kastike',10.00,'Tulinen vegedog'),
  (1,'Gluteeniton sämpylä, Soijamakkara, Paahdettu sipuli , Avocado, Vegaaninen honey mustard',10.00,'Gluteeniton vegedog'),
  (1,'Vehnä sämpylä, Kavismakkara, Sipuli , Vegaaninen juusto raaste, Guacamole ',10.00,'Vegedog'),
  (1,'Pretzel-sämpylä, Tulinen Kasvismakkara, Chili, Kurkkusalaatti, Siracha-majoneesi ',10.00,'Tulinen pretzelvege'),
  (1,'Pretzel-sämpylä, Liha makkara, Chili, Sipuli, Juusto raaste, Siracha-majoneesi',10.00, 'Pretzeldog'),
  (1,'Täysjyvä sämpylä, Kana makkara, Avocado, Tomaattisalsa, Jalapenos',10.00, 'Tulinen kana dog'),
  (1,'Gluteeniton sämpylä, Kana makkara, Pikkelöity sipuli ,Kurkkusalaatti , Hummus ',10.00, 'Kana dog'),
  (1,'Vehnä sämpylä, Tulinen makkara, Chili ,Jalapenos, Paahdettu sipuli , Siracha-majoneesi ',10.00, 'Tulinen dog')



INSERT INTO hod_beverage (order_id,beverage_name, beverage_price)
VALUE (1,'Vesi', 0.90),
(1,'coca-cola', 1.50),
(1,'Pepsi max', 1.50),
(1,'Lemonade', 1.40),
(1,'Jaffa', 1.50)

  


const checkboxes: NodeListOf<HTMLInputElement> = document.querySelectorAll(
  '.custom-checkbox input[type="checkbox"]'
);
const totalElement: HTMLElement | null =
  document.querySelector(".cart-total-price");
const cartContent: HTMLElement | null = document.querySelector(".cart-content");
let totalSum: number = 0;

function updateTotal(): void {
  totalSum = 0;
  if (cartContent) cartContent.innerHTML = "";

  checkboxes.forEach((checkbox: HTMLInputElement) => {
    if (checkbox.checked) {
      const priceElement: HTMLElement | null | undefined = checkbox
        .nextElementSibling?.nextElementSibling as HTMLElement | null;
      const price: number = parseFloat(priceElement?.textContent || "0");
      totalSum += price;

      // Add selected topping to the cart content
      const toppingName: string | undefined =
        checkbox.nextElementSibling?.nextElementSibling?.textContent ||
        undefined;

      const cartItem: HTMLDivElement = document.createElement("div");
      if (toppingName) {
        cartItem.textContent = `${toppingName} - ${price.toFixed(2)}€`;
        if (cartContent) cartContent.appendChild(cartItem);
      }
    }
  });
  if (totalElement) totalElement.textContent = `${totalSum.toFixed(2)}€`;
}

checkboxes.forEach((checkbox: HTMLInputElement) => {
  checkbox.addEventListener("change", updateTotal);
});

const addToCartBtn: HTMLElement | null =
  document.querySelector(".add-to-cart-btn");
addToCartBtn?.addEventListener("click", () => {
  // Perform actions when the "Lisää koriin" (Add to cart) button is clicked
  // For example, update the cart items or send data to the server
  updateTotal();
});

const cartClose: HTMLElement | null = document.getElementById("cart-close");
cartClose?.addEventListener("click", () => {
  // Close the cart when the close icon is clicked
  // Implement functionality to hide the cart here
});

const cartCheckout: HTMLElement | null =
  document.querySelector(".cart-checkout");
cartCheckout?.addEventListener("click", () => {
  // Implement checkout functionality here
  // For example, send the cart items to the server
});



SELECT
  O.order_id,
  HD.hotdog_name,
  HD.base_price AS hotdog_base_price,
  SUM(T.topping_price) AS total_topping_price,
  OH.amount AS hotdog_amount,
  (HD.base_price * OH.amount + COALESCE(SUM(T.topping_price), 0)) AS total_price
FROM
  Orders O
JOIN
  Orders_hotdogs OH ON O.order_id = OH.order_id
JOIN
  Hotdogs HD ON OH.hotdog_id = HD.hotdog_id
LEFT JOIN
  Hotdog_toppings HT ON OH.hotdog_id = HT.hotdog_id
LEFT JOIN
  Toppings T ON HT.topping_id = T.topping_id
GROUP BY
  O.order_id, HD.hotdog_name, HD.base_price, OH.amount;

COrrect:
SELECT
  O.order_id,
  HD.hotdog_name,
  HD.base_price AS hotdog_base_price,
  SUM(T.topping_price) AS total_topping_price,
  OH.amount AS hotdog_amount,
  (HD.base_price + COALESCE(SUM(T.topping_price), 0)) * OH.amount AS total_price
FROM
  Orders O
JOIN
  Orders_hotdogs OH ON O.order_id = OH.order_id
JOIN
  Hotdogs HD ON OH.hotdog_id = HD.hotdog_id
LEFT JOIN
  Hotdog_toppings HT ON OH.hotdog_id = HT.hotdog_id
LEFT JOIN
  Toppings T ON HT.topping_id = T.topping_id
WHERE
  O.order_id = 50
GROUP BY
  O.order_id, HD.hotdog_name, HD.base_price, OH.amount;

Update:
-- Update Orders.total_price for a specific order_id
UPDATE Orders O
JOIN (
  SELECT
    OH.order_id,
    HD.base_price,
    COALESCE(SUM(T.topping_price * OH.amount), 0) AS total_topping_price
  FROM Orders_hotdogs OH
  JOIN Hotdogs HD ON OH.hotdog_id = HD.hotdog_id
  LEFT JOIN Hotdog_toppings HT ON OH.hotdog_id = HT.hotdog_id
  LEFT JOIN Toppings T ON HT.topping_id = T.topping_id
  WHERE OH.order_id = 50
  GROUP BY OH.order_id, HD.base_price
) AS OrderTotals ON O.order_id = OrderTotals.order_id
SET O.total_price = OrderTotals.base_price + OrderTotals.total_topping_price;
